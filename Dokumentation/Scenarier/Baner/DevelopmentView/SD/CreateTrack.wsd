@startuml Create Track

title Create Track
legend top
|Artefakt| Navn |
|UC| Opretter Bane|
|SSD| Opretter Bane |
|OC| Opretter Bane|
|**SD**| **Create Track** |
end legend
!theme Dracula from Dokumentation\Scenarier\Baner\DevelopmentView\DCD\

actor User
box "DogApp.Web"
participant "View" as UI
end box
box "DogApp.API"
participant "API" as Ap
end box
box "DogApp.Serivces"
participant "Track Service" as Ts
end box
box "DogApp.Repositories"
participant "Track Repository" as Tr
end box
box "DogApp.Data"
participant "Track" as Track
participant "DataContext" as Dc
end box
box "Database"
database "Database" as Db
end box

$Message(User, UI, CreateTrack, Height : int; Width : int; Collection<TrackItem>TrackItems; Category : string)
activate UI
$Message(UI, Ap, CreateTask, TrackDto)
activate Ap
opt if Trackserice is null
$ReturnMessage(UI,Ap, InvalidOperationException, Error Message)
end
opt if TrackDto is null
$ReturnMessage(UI,Ap, BadRequest, Error Message)
end
$PlainMessage(Ap, Ap, Create TrackDto object)
alt if Trackserice exists
$Message(Ap, Ts, CreateTrack, track)
deactivate Ap
activate Ts
$Message(Ts, Tr, AddAsync, track)
deactivate Ts
activate Tr
$PlainMessage(Tr, Track, Creates Track Object)

activate Track 
$PlainReturnMessage(Tr, Track, return Track Object)
deactivate Track

$PlainMessage(Tr,Dc,Database call)
deactivate Tr
activate Dc
$PlainMessage(Dc,Db,DbSet Track)
deactivate Dc
activate Db
$PlainReturnMessage(Dc,Db, Track Created)
deactivate Db
activate Dc
$PlainReturnMessage(Tr,Dc, Track Created)
deactivate Dc
activate Tr
$PlainReturnMessage(Ts,Tr, Track Created)
deactivate Tr
activate Ts
$PlainReturnMessage(Ap,Ts, Track Created)
deactivate Ts
activate Ap
$ReturnMessage(UI,Ap, Ok, Bane oprettet)
$PlainReturnMessage(User,UI, Bane oprettet successfully.)
else if trackService is Null
$ReturnMessage(UI,Ap, Statuscode, 500)
deactivate Ap
$PlainReturnMessage(User,UI, No track was created)


end
@enduml