@startuml LavBane

title  Create Track
legend top
|Artefakt| Navn |
|UC| Opdater Bane|
|SSD| Opdater Bane |
|OC| Opdater Bane|
|**SD**| **Update Track** |
end legend
!theme Dracula from Dokumentation\Scenarier\Baner\DevelopmentView\DCD\

actor User
box "DogApp.Web"
participant "View" as UI
end box
box "DogApp.API"
participant "API" as Ap
end box
box "DogApp.Serivces"
participant "Track Service" as Ts
end box
box "DogApp.Repositories"
participant "Track Repository" as Tr
end box
box "DogApp.Data"
participant "DataContext" as Dc
end box
box "Database"
database "Database" as Db
end box

$Message(User, UI, CreateTrack, Id int; Height : int; Width : int; Collection<TrackItem>TrackItems; Category : string)
activate UI
$Message(UI, Ap, CreateTask, TrackDto)
activate Ap
opt if Trackserice is null
$ReturnMessage(UI,Ap, InvalidOperationException, Error Message)
end
opt if TrackDto is null
$ReturnMessage(UI,Ap, BadRequest, Error Message)
end
$PlainMessage(Ap, Ap, Create TrackDto object)
alt if Trackserice exists
$Message(Ap, Ts, UpdateTrack, track)
deactivate Ap
activate Ts
$Message(Ts, Tr, UpdateAsync, track)
deactivate Ts
activate Tr



$PlainMessage(Tr,Dc,Database call)
deactivate Tr
activate Dc
$PlainMessage(Dc,Db,Updates Track)
deactivate Dc
activate Db
$PlainReturnMessage(Dc,Db, Track Updated)
deactivate Db
activate Dc
$PlainReturnMessage(Tr,Dc, Track Updated)
deactivate Dc
activate Tr
$PlainReturnMessage(Ts,Tr, Track Updated)
deactivate Tr
activate Ts
$PlainReturnMessage(Ap,Ts, Track Updated)
deactivate Ts
activate Ap
$ReturnMessage(UI,Ap, Ok, Bane Opdateret)
$PlainReturnMessage(User,UI,Success: Bane opdateret.)
else if trackService is Null
$ReturnMessage(UI,Ap, Statuscode, 500)
deactivate Ap
$PlainReturnMessage(User,UI, No track was created)


end
@enduml